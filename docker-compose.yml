volumes:
  wrt_pgsql_data:
    driver: local
  wrt_mongodb_data:
    driver: local
  wrt_elasticsearch_data:
    driver: local
  wrt_unix_sockets:
    driver: local

networks:
  wrt_internal_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.177.63.0/24
  wrt_pgsql_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.177.64.0/24

services:
  # WoW Recruitment PostgreSQL
  wrt_postgresql:
    container_name: wrt_postgresql
    image: postgres:16.3-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRE_DATABASE_DB} -U ${POSTGRE_DATABASE_USER}"]
    volumes:
      - wrt_pgsql_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRE_DATABASE_USER:-wrt}
      - POSTGRES_PASSWORD=${POSTGRE_DATABASE_PASSWORD:-changeme}
      - POSTGRES_DB=${POSTGRE_DATABASE_DB:-wow_recruitment}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    networks:
      - wrt_pgsql_network

  # WoW Recruitment PostgreSQL Connection Pooling
  wrt_pgbouncer:
    container_name: wrt_pgbouncer
    image: edoburu/pgbouncer:1.22.1-p0
    restart: unless-stopped
    depends_on:
      wrt_postgresql:
        condition: service_healthy
    links:
      - wrt_postgresql
    environment:
      - DB_USER=${POSTGRE_DATABASE_USER:-wrt}
      - DB_PASSWORD=${POSTGRE_DATABASE_PASSWORD:-changeme}
      - DB_HOST=${POSTGRE_DATABASE_HOST:-wrt_postgresql}
      - DB_PORT=${POSTGRE_DATABASE_PORT:-5432}
      - AUTH_TYPE=scram-sha-256
    networks:
      - wrt_internal_network
      - wrt_pgsql_network

  # WoW Recruitment MongoDB
  wrt_mongodb:
    container_name: wrt_mongodb
    image: mongo:7.0.11
    env_file: ./.env
    restart: unless-stopped
    healthcheck:
      test: exit $$? | echo 'db.runCommand("ping").ok | mongosh localhost:$${MONGODB_DATABASE_PORT} --quiet'
      interval: 1s
      start_period: 10s
    volumes:
        - ./.docker/mongodb/mongo.conf:/etc/mongo.conf
        - ./.docker/mongodb/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
        - wrt_mongodb_data:/data/db
    environment:
        - MONGO_INITDB_ROOT_USERNAME=${MONGODB_DATABASE_ROOT_USER:-root}
        - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_DATABASE_ROOT_PASSWORD:-changeme}
        - MONGO_INITDB_DATABASE=${MONGODB_DATABASE_DB:-wow_recruitment}
    networks:
      - wrt_internal_network

  # WoW Recruitment KeyDB
  wrt_keydb:
    container_name: wrt_keydb
    user: "${UID:-1000}:${GID:-1000}"
    # alpine docker images are currently experimental, and KeyDB still requires a bit of work to fully support Alpine Builds
    # @see https://hub.docker.com/r/eqalpha/keydb
    image: 'eqalpha/keydb:x86_64_v6.3.3'
    restart: unless-stopped
    command: ['keydb-server', '/usr/local/etc/keydb/keydb.conf', '--requirepass "${KEYDB_CACHE_SECRET:-changeme}"']
    healthcheck:
      test: exit $$? | keydb-cli -a $${KEYDB_CACHE_SECRET} --raw incr ping
      interval: 1s
      start_interval: 5s
    logging:
        options:
            max-size: "20m"
            max-file: "5"
    environment:
      - KEYDB_CACHE_SECRET=${KEYDB_CACHE_SECRET:-changeme}
    ports:
      - '${KEYDB_CACHE_PORT:-6379}:6379'
    volumes:
      - './.docker/keydb/keydb.conf:/usr/local/etc/keydb/keydb.conf'
      - 'wrt_unix_sockets:/tmp/'
    networks:
      - wrt_internal_network

  # WoW Recruitment App
  wrt_app:
    build:
      context: .
      dockerfile: ./.docker/app/Dockerfile
      target: ${ENV:-prod}
      args:
          UID: ${UID:-1000}
          GID: ${GID:-1000}
    links:
      - wrt_keydb
      - wrt_mongodb
      - wrt_pgbouncer
    depends_on:
      wrt_keydb:
        condition: service_healthy
      wrt_mongodb:
        condition: service_healthy
      wrt_pgbouncer:
        condition: service_started
    restart: unless-stopped
    env_file: ./.env
    container_name: wrt_app
    volumes:
      - ./.docker/app/supervisor/supervisord.conf:/etc/supervisord.conf
      - ./.docker/app/supervisor/conf.d:/etc/supervisor/conf.d
      - ./.docker/app/php/fpm/www-common.conf:/usr/local/etc/php-fpm.d/www-common.conf
      - ./.docker/app/php/config/php.ini:/usr/local/etc/php/php.ini
      - ./.docker/app/php/config/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
      - ./logs:/app/logs
      - wrt_unix_sockets:/var/run/sockets/
    networks:
      - wrt_internal_network
